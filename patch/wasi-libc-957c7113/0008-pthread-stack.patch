diff --git a/libc-top-half/musl/src/thread/pthread_create.c b/libc-top-half/musl/src/thread/pthread_create.c
index 3b3a264..93bd15b 100644
--- a/libc-top-half/musl/src/thread/pthread_create.c
+++ b/libc-top-half/musl/src/thread/pthread_create.c
@@ -286,10 +286,12 @@ _Noreturn void wasi_thread_start(int tid, void *p)
 	// without waiting.
 	atomic_store((atomic_int *) &(self->tid), tid);
 	// Set the stack pointer.
+    /*
   	__asm__(".globaltype __stack_pointer, i32\n"
 			"local.get %0\n"
 			"global.set __stack_pointer\n"
 			:: "r"(self->stack));
+    */
 	// Execute the user's start function.
 	__pthread_exit(args->start_func(args->start_arg));
 }
diff --git a/libc-top-half/musl/src/env/__init_tls.c b/libc-top-half/musl/src/env/__init_tls.c
index 5e32f54..dd2d5ad 100644
--- a/libc-top-half/musl/src/env/__init_tls.c
+++ b/libc-top-half/musl/src/env/__init_tls.c
@@ -33,6 +33,10 @@ extern weak unsigned char __stack_low;
 
 static inline void setup_default_stack_size()
 {
+    // NOTE: currently WAMR doesn't support setting new stack by app for a new thread, so the stack size is meaningless here
+    __default_stacksize = PTHREAD_STACK_MIN;
+    return;
+
 	ptrdiff_t stack_size;
 
 	if (&__stack_high)
