diff --git a/libc-bottom-half/headers/public/wasi/libc-find-relpath.h b/libc-bottom-half/headers/public/wasi/libc-find-relpath.h
index 445613f..168c585 100644
--- a/libc-bottom-half/headers/public/wasi/libc-find-relpath.h
+++ b/libc-bottom-half/headers/public/wasi/libc-find-relpath.h
@@ -5,6 +5,15 @@
 extern "C" {
 #endif
 
+struct __wasilibc_find_path_tls_data {
+    char *relative_buf;
+    size_t relative_buf_len;
+    char *alt_relative_buf;
+    size_t alt_relative_buf_len;
+};
+
+extern struct __wasilibc_find_path_tls_data* __wasilibc_find_path_tls_data_location();
+
 /**
  * Look up the given `path`, relative to the cwd, in the preopened directory
  * map. If a suitable entry is found, then the file descriptor for that entry
diff --git a/libc-bottom-half/sources/posix.c b/libc-bottom-half/sources/posix.c
index 35dd99b..1a268f8 100644
--- a/libc-bottom-half/sources/posix.c
+++ b/libc-bottom-half/sources/posix.c
@@ -29,21 +29,19 @@ static int find_relpath2(
 // `relative` pointer will point to static data that cannot be reused until
 // `relative` is no longer used.
 static int find_relpath(const char *path, char **relative) {
-    static __thread char *relative_buf = NULL;
-    static __thread size_t relative_buf_len = 0;
-    int fd = find_relpath2(path, &relative_buf, &relative_buf_len);
+    struct __wasilibc_find_path_tls_data* tls_data = __wasilibc_find_path_tls_data_location();
+    int fd = find_relpath2(path, &tls_data->relative_buf, &tls_data->relative_buf_len);
     // find_relpath2 can update relative_buf, so assign it after the call
-    *relative = relative_buf;
+    *relative = tls_data->relative_buf;
     return fd;
 }
 
 // same as `find_relpath`, but uses another set of static variables to cache
 static int find_relpath_alt(const char *path, char **relative) {
-    static __thread char *relative_buf = NULL;
-    static __thread size_t relative_buf_len = 0;
-    int fd = find_relpath2(path, &relative_buf, &relative_buf_len);
+    struct __wasilibc_find_path_tls_data* tls_data = __wasilibc_find_path_tls_data_location();
+    int fd = find_relpath2(path, &tls_data->alt_relative_buf, &tls_data->alt_relative_buf_len);
     // find_relpath2 can update relative_buf, so assign it after the call
-    *relative = relative_buf;
+    *relative = tls_data->alt_relative_buf;
     return fd;
 }
 
